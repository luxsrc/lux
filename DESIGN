lux is designed around a simple but powerful module architecture.
Everything in lux is implemented as a module.  The lux core library,
libux, provides basic functions to access modules/plug-ins and to
construct, configure, and run scientific computation jobs.

INTERFACE: a lux interface Lux_MOD is simply a function type or a
  structure of function pointers that provides a type-safe way to
  access features in a lux module.  For example, a random number
  generator may have the following interface:

	typedef int (Lux_rand)(void); /* Lux_rand is not a pointer type */

  an input/output module that loads and dumps simulation data may have
  the following interface:

	typedef struct {
		void (*load)(Lux_sim *, const char *);
		void (*dump)(Lux_sim *, const char *);
	} Lux_io;

  This approach allows more than one implementation of the same
  interface.  A user can choose any implementation at run time:

	Lux_rand *rg = lux_load("rand", "nr"); /* numerical recipes version  */
	Lux_io   *io = lux_load("io",   ext);  /* ext can be "hdf5" or "vtk" */

  and the following function calls should work properly:

	int r = rg();
	io->load(sim, name);

  The lux interface Lux_MOD is defined in a header file MOD.h, which
  is placed in mod/ in the lux source tree, and is installed to
  $prefix/include/lux.

DYNAMIC MODULE: a standard lux module MOD is a dynamically loadable
  library that contains exactly one constructor

	void *LUXCMOD(const void *);

  or, for one that does not require initialization, it needs to
  contain exactly one "entry symbol"

	Lux_MOD LUXEMOD;

  which may be an exported function (e.g., of type Lux_rand in the
  previous section) or an exported structure (e.g., of type Lux_io)
  that provides the module interface.  The macros LUXCMOD and LUXEMOD
  expand to luxCMOD and to luxEMOD, respectively, to avoid symbol
  conflicts.  When lux_load() access a module, it calls LUXCMOD() to
  construct the interface or returns LUXEMOD directly.  LUXCMOD() may
  take care additional resource allocations.  In such a case, the lux
  module must implement a destructor:

	void LUXDMOD(Lux_MOD *);

  which expands to luxDMOD, to release the allocated resource.  Note
  that chain-loading, i.e., using

	return lux_load(another_mod, more_options);

  in a constructor, is allowed.  It works as expected because of the
  last-in-first-out nature of the stack used in the hash table.

  The concepts of constructor and destructor mentioned above are
  identical to the ones used in object oriented programming paradigm.
  Typically, a lux module with a constructor maps naturally to a
  class; hence a loaded module maps naturally to an instance of a
  class, i.e., an object.  Sometime, we design a module in a way that
  it always return the same handle.  This maps naturally to a
  singleton pattern.  A more interesting situation is when this
  singleton module provides a constructor and a destructor for other
  types---the singleton module now becomes a dynamically loadable
  class.  We will discuss this pattern with more details in section
  "OBJECTS, CLASSES, and METACLASSES".

  A lux module MOD is implemented in mod/ in the lux source tree, and
  is installed to $prefix/lib/lux.  In order to access dynamic
  modules, libux requires an external dynamic linker, which may make
  symbols from loaded modules globally accessible.  Therefore, module
  developers may want to put all the source code into a single file
  and define all private functions as static functions.  LUXCMOD() or
  LUXEMOD can then interface all of these static functions.  This is
  an ultimate way to avoid symbol conflicts because LUXCMOD and
  LUXDMOD, or LUXEMOD, are the only exported symbols.

STATIC MODULE, RESOURCE ALLOCATOR, HYBRID MODULE, etc: it is sometimes
  overkill to pack small functions into a dynamic module.  Calling
  functions via pointers can also reduce the performance.  Hence, we
  introduce the notion of "static modules", which are just header
  files that contain macros and/or static inline functions.  In
  addition to being efficient, the static nature of these simple
  modules helps resolving the bootstrap problem of implementing the
  lux core library libux (see the last section).

  In some user cases, additional manipulations are needed after
  resources allocations.  Static modules that implement these
  manipulations are called resource allocators.  They usually do not
  have delocators.  Conversely, if a mkSTRUCT()/rmSTRUCT() pair is
  implemented for a corresponding data structure STRUCT, then we refer
  such a module as a hybrid module.  Just like static modules,
  resource allocators and hybrid modules are lightweight and are
  implemented entirely in single header files; unlike static modules,
  however, hybrid modules require both constructors and destructors to
  function.

  Although static, resource allocators, hybrid modules, etc cannot
  encode library dependencies themselves, they never cause problems in
  practice because all their dependent libraries are linked through
  the convenience system librarysys/libsys.la.

CUSTOM MODULE and MODULE BUNDLE: as we described in the above
  sections, lux's module architecture is very powerful.  To generalize
  it even further, it can be viewed as an abstraction to bring in any
  *resource* at run-time.  For example, if we can treat a restart
  file, or a simulation output folder, as a module, then we can unify
  simulation initialization and restoration.  To make this unification
  possible, the libux instance (see the last section) contains a list
  of module loaders that can be reconfigured at run-time.  It can even
  load a loader dynamically from a folder---in such a case, we refer
  the folder as a module bundle.

OBJECT ORIENTED PROGRAMMING: lux is implemented in C for performance,
  portability, and integrability (with other programming languages).
  This does not mean that we cannot write well-organized, object
  oriented codes with lux.  Indeed,

    Object oriented is a programming paradigm, not a computer
    language.
                                                  -- Michael Natterer

  In the following two sections, we will describe some general ideas
  on how to implement an object system in lux.  Note that, however,
  the interface/module system of lux is very flexible---more flexible
  than the standard object inheritance approach.  Hence, we encourage
  developers be open minded and explore other paradigm/pattern.

OBJECTS, CLASSES, and METACLASSES: a lux interface together with an
  (implemented) module acts very similar to a class in object oriented
  programming languages such as C++.  As described above, loading a
  lux module is like creating an object.  For example, calling

	Lux_MOD *MOD = lux_load("MOD", opts);
	MOD->func(MOD, para);

  has more-or-less the same effect as

	class *object = new class();
	object->method(para);

  Unfortunately, using lux interfaces/modules as objects can be
  wasteful, especially for heavy interfaces.  This is because all
  instances in

	Lux_MOD *ins1 = lux_load("MOD", opts);
	Lux_MOD *ins2 = lux_load("MOD", opts);
	Lux_MOD *ins3 = lux_load("MOD", opts);
	...

  contain the same list of function pointers.  To overcome this, we
  can introduce one more layer of indirectness and pack all the
  function pointers and shared information about the module into a
  "virtual function table" vtab:

	typedef struct LuxSMOD Lux_MOD;

	struct vtab { /* allocated only once by lux_load() */
		const char *name;
		double (*f)(Lux_MOD *, ...);
		...
	};

	struct LuxSMOD {
		const struct vtab *vtab;
		double x;
		...
	};

  In the above example, vtab behaves like a metaclass.  The original
  lux interface Lux_MOD becomes a class, and its instances are
  objects.  Indeed, because the programmers know the relationship
  between objects, classes, and metaclass, there is no need to store
  the metaclass with the object.  That way, we can remove one layer of
  indirectness by

	typedef struct { /* type of an object, i.e., a class */
		double x;
		...
	} Lux_obj;

	typedef struct { /* type of a class, i.e., a metaclass */
		const char *name;
		Lux_obj *(*mkobj)();
		void (*rmobj)(Lux_obj *);
		...
		double (*f)(Lux_obj *, double);
		...
	} Lux_MOD;

	Lux_MOD *cls  = lux_load("MOD", opts);
	Lux_obj *ins1 = MOD->mkobj();
	Lux_obj *ins2 = MOD->mkobj();
	...

	cls->f(ins1, para);
	cls->f(ins2, para);
	...

  This approach can significantly reduce the instance creation
  overhead by only loading the module once.  Indeed, this pattern
  allows us to introduce new classes at runtime.  It is more powerful
  than compile-time classes in C++.

INHERITANCE vs COMPOSITION: one of the key concepts in object oriented
  programming is inheritance.  It is nothing but a way to allow code
  reuse.  At low level, inheritance uses a standard rule to append
  extra data to a structure so that an object can be passed to methods
  that are defined for its superclass.  For example,

	typedef struct {
		double area;
		double circumference;
	} Shape;

	typedef struct {
		Shape  super;
		double radius;
	} Circle;

	typedef struct {
		Shape  super;
		double side;
	} Square;

  Now, if we define a function

	double roundness(Shape *s)
	{
		double ar = sqrt(area / M_PI);
		double cr = circumference / (2 * M_PI);
		return ar / cr;
	}

  The function calls

	double cr = roundness((Shape *)&circle);
	double sr = roundness((Shape *)&square);

  produce the expected results.  The above example gives an guideline
  for developers to use object inheritance in lux.  On one hand, since
  the developers are responsible for writing their own structure
  appending rule, this approach is more flexible (but also more
  verbose) compare to language-supported inheritance such as in C++.
  On the other hand, the Gang of Four "favor object composition over
  class inheritance".  In lux, as long as a class's size is known at
  compile time, we have the freedom to compose an object by reference
  or embedding:

	typedef struct {
		Shape *reference; /* standard composition uses references */
		Shape  embedded;  /* composition by embedding */
		double radius;
	} Circle;

  Reference introduces one layer of indirectness, which should be
  avoided for features that are accessed by the inner loops.  In such
  a case, embedding, which is a more flexible way for inheritance,
  should be used instead.  For the outer loops and "shallow" objects,
  reference and embedding can both be used.

OPTIMIZATION: according to the README.hacks file in the fftw2 library,

    The architectural details of modern machines make performance
    *extremely* sensitive to little details such as where your code
    and data are placed in memory.

  It is therefore very difficult to develop a library with portable
  performance.  In lux, we follow fftw's approach (and terminology).
  For each runtime-optimizable algorithm, we store its configuration
  in a "problem" data structure.  The problem is passed to a planner,
  which uses a list of "solver" modules to solve for many "solution"
  algorithms.  We then measure the performance of each of these
  solutions at runtime and select the fastest one.  Furthermore, lux
  exposes this technique through a standard interface.  This makes
  developing runtime-optimizable algorithms more accessible to a wider
  range of computational scientists.

  At the lowest level, a runtime-optimized algorithm can be executed
  by the following function call in C:

	selected_driver(istate, xstate, paras, ro, rw, wo);

  where `selected_driver` is a pointer to a driver function or to the
  actual algorithm; `istate` and `xstate` are internal and external
  states, respectively, which hold anything needed by the algorithm
  that would affect the performance (e.g., array size, array stride,
  twiddle factors for FFT, pointers to codelets); `paras` are input
  parameters that would not affect performance (e.g., alpha in BLAS);
  and `ro`, `rw`, and `wo` are pointers to the read-only, read-write,
  and write-only storage data structures for input and/or output.

  In principle, we can pack istate, xstate, paras, in, and out into a
  single structure.  We call this a "task" in lux,

	typedef struct LuxStask Lux_task;
	struct LuxStask {
		void (*exec)(Lux_task *);
		struct { ... } istate;
		struct { ... } xstate;
		struct { ... } paras;
		Lux_data *ro, *rw, *wo;
	};

  which has a very simple and unified interface:

	task->exec(task);

  Although runtime-optimization using a task can take into account,
  e.g., memory alignments of data structures, it requires creating new
  tasks to apply the same algorithm to different parameters and data
  sets.  This often makes the code harder to manage.  Moreover, the
  creation of additional tasks may sometimes be costly.  The fftw3
  library solves the second disadvantage by caching the measured
  performance with a hash table.  This is overkill for lux (at least
  for now).  Instead, lux uses a more flexible and lightweight, but
  problem dependent, structure:

	struct algo {
		void (*exec)(struct algo *, ...);
		struct { ... } istate;
		struct { ... } xstate;
	};

  where exec() takes different arguments according to the algorithm.
  For example, for an in-place FFT, it is

	fft_inplace->exec(fft_inplace, array);

  and for a semi-implicit Runge-Kutta stepping for the Navier-Stokes
  equations, it is

	rk4->exec(rk4, dt, nu, curr, next);

  This approach mirrors the "new-array execute" functions in fftw3
  such as fftw_execute_dft() and fftw_execute_split_dft().

  To summarize, the problem, algo, task, and solution data structures
  need to store, and the planner and solver modules need to deliver,
  at least the following information:

    problem:                  xstate, paras, ro, rw, wo (prob. spec. interface)
    algo:     driver, istate, xstate                    (prob. spec. interface)
    task:     driver, istate, xstate, paras, ro, rw, wo
    solution: driver, istate, xstate, paras, ro, rw, wo, opcnt, mcost, ecost
    solver:   driver, istate, xstate,                    opcnt         ecost
    planner:  solver[],                                         mcost

  In the above table, opcnt stands for floating-operation count, ecost
  stands for the estimated computation cost, and mcost stands for the
  measured computation cost.  Although logically task is a subclass of
  algo and solution is a subclass of task, task and solution are
  implemented by composition instead of inheritance.

  To summarize, a lux AP solver returns an array of solutions; while a
  planner returns a single optimal plan according to giving flags.
  Because problem and algo and problem-specific, they are typedefs of
  `const void` and `void` respectively; while other AP types have well
  defined interfaces.  Also, because the implementation of a task is
  not known to libux, it is embedded as the last field in solution for
  extendability.

PLANNERS and TASKS: while planners and tasks are described above in
  terms of optimization, they are not restricted to small components
  of large simulation or data analysis jobs.  Instead, a task itself
  can be a complete simulation or analysis job.  In such a case, the
  planner is the configuration mechanism of the job; while the
  returned optimal task is the job itself.

MEMORY ORDER and DOPE VECTOR: in order to describe the memory layout
  of a high-rank/multi-dimensional array, we define the notions of
  logical and memory orders.

  * Logical order describes how an array is accessed from a numerical
    analysis perspective.  For example, (x, y, z) defines a logical
    order; (ky, kx, kz) defines another.  It also determines the
    layout of dope vector (see below) and hence how the developer
    accesses the information.

  * Memory order describes how an array is accessed from an algorithm
    and data structure perspective.  It is defined in increasing order
    of the stride of each rank/dimension of an array.  The zeroth rank
    therefore describes the tightest rank and corresponding to the
    inner-most loops.

  Generally speaking, applying recursive loop in memory order should
  increase cache performance of modern CPUs.  Differentiating these
  two orders allows us to dynamically construct fast memory accessing
  pattern in an algo even if the logical order of an array is fixed at
  compile-time.

  A dope vector holds information about memory layout of an array.
  Because lux allows for changing memory accessing pattern at runtime,
  in addition to count/size and stride, we need to store the logical
  order of every rank/dimension.  A lux dope vector is therefore an
  array of

	typedef struct {
		Lux_int r; /* rank/dimension */
		Lux_int c; /* count/size */
		Lux_int s; /* stride */
	} Lux_dope;

  with an offset of rank Lux_dope's.  In other word, a dope pointer
  always points to the last element of the dope vector.

	Lux_dope *head = malloc((rank+1) * sizeof(Lux_dope));
	Lux_dope *dope = head + rank;

  This way, the negative elements in the dope vector dope[] store the
  rank-number, count, and strides for each rank.  For a tightly packed
  column-major (Fortran) array, we have the relations

	dope[r].r == r + rank;
 	dope[r].s == dope[r-1].c * dope[r-1].s;

  Hence, it is natural to extend these to the zeroth element and make

  * dope->r the total rank so the dope values of the r-th rank can
    be accessed by dope[r-dope->r].

  * dope->s the number total number of elements including padding if
    the array is not tightly packed

  * dope->c the size of each element in bytes so the total size can
    be easily computed by dope->c * dope->s.

  As an example, a tightly packed two-dimensional/second-rank 4 x 3
  column-major array of double has the following dope vector

                     |  r*  c   s
    -----------------+-------------
    head == dope[-2] |  0   4   1
            dope[-1] |  1   3   4
            dope[ 0] |  2   8  12

  while the same logical array casted into row-major on a machine
  supporting 256 bits vector operator has the following dope vector

                     |  r*  c   s
    -----------------+-------------
    head == dope[-2] |  0   4   4 (extra 64-bit padding)
            dope[-1] |  1   3   1
            dope[ 0] |  2   8  16

  The stars next to the 'r's above indicate that these dope vectors
  are sorted in rank, and hence are logical orders.  To access the
  above arrays efficiently, we sort the dope vectors according to the
  stride,

                     |  1st array  |  2nd array
                     |  r   c   s* |  r   c   s*
    -----------------+-------------+-------------
    head == dope[-2] |  0   4   1  |  1   3   1
            dope[-1] |  1   3   4  |  0   4   4
            dope[ 0] |  2   8  12  |  2   8  16

  For the column-major arrays like the 1st one, the logical and memory
  orders are the same.

  When inheriting from Lux_dope, the dope vector is effectively a
  "backward flexible array member" of the subclass:

	typedef struct {
		Lux_dope dope[1]; /* embedded superclass; must be first */
		...
	} Subclass;

	Lux_dope *head = malloc(rank * sizeof(Lux_dope) + sizeof(Subclass));
	Subclass *data = (Subclass *)(head + rank);

STRUCT AS TUPLE: like in many other programming languages, a function
  in C can return at most one variable.  Although it is possible to
  use structures to imitate tuples, returning a structure is usually
  consider a bad practice in C.  This is probably due to the idea that
  copying a large structure is time consuming.  Hence, the
  conventional wisdom is that a C function should always consume and
  return pointers to structures, instead of structures themselves.

  Although the above idea is correct, returning a pointer actually has
  some sticky issues---the memory pointed by the returned pointer must
  have a lifetime longer than the callee.  This can be achieved by two
  methods

  - Declaring a static type structure which has a lifetime as long as
    the program and then return a pointer to it

	struct large *f()
	{
		static struct large v;
		...
		return &v;
	}

  - Using malloc() to allocate the memory on the heap

	struct large *f()
	{
		struct large *p = malloc(sizeof(struct large));
		...
		return p;
	}

  Of course, there are situations that these are appropriate methods.
  However, in some other cases, e.g., if we simply want a function to
  return a small tuple, both methods have significant drawbacks.
  Specifically, the first method is not (thread-) safe because the
  values pointed by the return pointer may change if the same function
  is called multiple times, possible in different threads.  The second
  method requires the expensive malloc(), and it requires the caller
  to explicitly free the returned pointer, which can easily lead to
  memory leakage.

  Therefore, in lux, we encourage developers not to discard the idea
  of returning (small) structure for all use cases.  Returning
  multiple related variables as a structure can avoid unnecessary
  static variables and malloc()/free(), and can be a very good pattern
  if used carefully.  In fact, dlib.h is a good use case of it.

ERROR/FAILURE HANDLING: the terms "error" here refers to a recoverable
  and expected runtime error.  It is the type of errors typically
  handled by exceptions in object oriented languages such as C++ and
  Java.  Examples include "out of memory" by allocating memory and
  "permission denied" by opening a file.  It is not a programming bug
  that the developer can fixed.  However, ignoring such a runtime
  error in lux is considered a bug.  We use the term "failure" in lux
  for recoverable runtime errors to avoid confusions.

  In C, ad-hoc special values of the returned variable are used to
  indicate failures.  Once a failure is identified, the special global
  variable errno is checked to obtain the detail of the failure.  This
  overcomes the limitation that a C function can only return a single
  variable, and it ensures performance because only a single integer
  is set in order to indicating the error.  Usually, a message is then
  logged before other action is taken to resolve the failure:

	int fid = open(path, flags, mode);
	if(fid < 0) { /* handle failure */
		int err = errno;
		(void)fprintf(stderr,
		              "Failed to open \"%s\" [%d: %s]\n",
		              path, err, strerror(err));
		switch(err) {
		... /* other error handling actions */
		}
	}

  The static module <lux/failed.h> enhances the standard <errno.h>
  mechanism.  The module defines the macro

	#define failed errno

  which, expands to errno, is an lvalue and has type int.  The maximum
  defined system failure code (ELAST for BSD, ERFKILL for Linux on
  most architectures, _LAST_ERRNO for Linux/PowerPC and EDQUOT for
  Linux/MIPS, which are all unified as LUX_ELAST in lux) is usually
  only a few hundreds.  Hence, in addition to the system failure
  codes, `failed` encodes additional information to help handling
  failures.

  How many bits can we use to encode the additional information?  As
  far as we can tell, BSD-based systems have ELAST up to 106 (Darwin).
  For Linux, ERFKILL == 132 on generic architectures.  It can take
  larger values on SPARC (134), Alpha (138), MIPS (167), and PARISC
  (256).  For Linux/PowerPC and Linux/MIPS, _LAST_ERRNO == 516 and
  EDQUOT == 1133, respectively.  Nevertheless, all these architectures
  (except generic) are 32-bit or 64-bit so there are at least 21
  remaining bits.  If we want lux to support all the platforms that
  have C compilers, our constraint really comes from the sizeof int,
  which is only guaranteed to be 16-bit.  As long as we only guarantee
  123 == 255 - 132 customized failed codes, we have at least 8 bits to
  encode additional information even for the ancient 16-bit systems.

  For most applications in high-performance computing, we need a
  detailed content dependent message to help debugging the algorithm.
  We suggest using a unique string id (e.g., message count, hash key)
  to identify a cached message, and bitwise-OR-ing the id with an
  optional facility key and the failure code described in this
  section.  This string id can be platform and implementation
  dependent.

MESSAGE LOGGING: non-interactive message loggings in lux are
  coordinated by a single function

	lux_vlog(unsigned flags, const char *restrict format, va_list ap);

  Just like `failed` is compatible with errno (see last section), the
  `flags` used by lux_vlog() should be compatible with standard syslog
  security levels.  Additional flags can then be bitwise-OR-ing to
  `flags` to fine tune lux_vlog()'s behavior.

  In order to achieve the above requirements, in the logging mode, the
  most significant byte is formed by:

    LUX_LOG_LEVEL(L)
    LUX_LOG_FLAGS

  The macro LUX_LOG_LEVEL(L) turns an integer to a implementation
  dependent 7-bit pattern.  It is used to determine if a message is
  fatal or not, and if the message is showed or not.

  When LUX_LOG_FLAGS is set, the less significant byte(s) are used to
  control vlog().  lux requires the following flags to be implemented

    LUX_LOG_STREAM(ID) /* with 0 <= ID < LUX_LOG_STREAM_COUNT */
    LUX_LOG_STDERR     /* == LUX_LOG_STREAM(2) */
    LUX_LOG_STDOUT     /* == LUX_LOG_STREAM(1) */
    LUX_LOG_STDBUF     /* == LUX_LOG_STREAM(0) */
    LUX_LOG_FLAG_AUTOFORMAT
    LUX_LOG_FLAG_PID
    LUX_LOG_FLAG_TIMESTAMP

  When LUX_LOG_FLAGS is not set (flags & LUX_LOG_FLAGS == 0), the less
  significant byte(s) are interpreted as an integer, which is an id
  linked by the current level.  There are 8 default severity levels
  that correspond to the standard syslog security levels or Linux
  kernel log levels:

    level  | description                          | usage examples in lux
    -------+--------------------------------------+---------------------------
    emerg  | may crash or return wrong results    | bug found by assertion
    alert  | problem need to be fixed immediately | hardware failure
    crit   | critical error/exception condition   | library (e.g. MPI) failure
    err    | error/exception condition            | malloc failure
    warning| error may occur if no action is taken| low disk space
    notice | normal but significant condition     | excepted interrupt by user
    info   | normal operational message           | a job has started
    debug  | print information for debugging      | name of called function

  Some of the commonly used levels are mapped to the following
  convenience message logging functions:

    emerg -> lux_fatal()
    err   -> lux_error()
    info  -> lux_print()
    debug -> lux_debug()

  In addition to the above convenience functions, to help catching
  programming bugs, lux also provides a macro lux_assert() to mirror
  the function of assert() in <assert.h>.  The main difference between
  the two is that lux_assert() uses lux_vlog() and is customizable.
  Note that lux_assert() is turned off at compile time by default, but
  can be turned on globally by passing the "--enable-assertion" option
  to `./configure`.

CORE LIBRARY: the lux core library, libux, provides basic functions
  such as lux_load() and lux_unload() to access modules/plug-ins and
  to construct, configure, and run scientific computation jobs.  It
  provide a stable and easy-to-use API for developers.

  For consistency, libux itself is implemented as a module in the mod/
  directory.  If libux were a real dynamic module, there would be a
  bootstrap problem---the dynamic loading feature is provided by libux
  but is not available until libux is loaded.  Also, shared library
  and dynamically loading module can be different on some operating
  systems (e.g., Darwin), which stops us from linking the libux module
  directly.  To resolve these problems, the libux module is a hybrid
  module implemeneted in a single header file <lux/libux.h>.  The
  actual library creation is done in api/, where we also implement
  wrappers functions for the API.

  The lux executable provided within this software package is a
  lightweight frontend of the lux core library for Unix-like
  environments.  The full power of the lux framework can be easily
  used by and integrated to other codes by first calling lux_setup()
  to setup the lux environment and then linking them with

	gcc program.c -lux -o program

  In fact, this is the reason we chose "libux" as the core library
  name---the name does not come from Linux.
