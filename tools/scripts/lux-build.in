#!/usr/bin/env bash
#
# Copyright (C) 2009,2011,2016 Chi-kwan Chan
# Copyright (C) 2009 Harvard-Smithsonian Center for Astrophysics
# Copyright (C) 2011 Nordic Institute for Theoretical Physics
# Copyright (C) 2016 Steward Observatory
#
# This file is part of lux.
#
# lux is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# lux is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License
# along with lux.  If not, see <http://www.gnu.org/licenses/>.

#==============================================================================
# Settings from `configure`
#------------------------------------------------------------------------------
# Installation paths
prefix="@prefix@"
exec_prefix="@exec_prefix@"
bindir="@bindir@"
includedir="@includedir@"
libdir="@libdir@"

# Compiler and standard flags
CC="@CC@"
CCLD="${CC}"
DEFS="-DHAVE_CONFIG_H"
DEFAULT_INCLUDES="-I. -I${includedir}"
LIBS="@LIBS@"
DEFAULT_RPATH="-rpath ${libdir}/lux"
OBJEXT="@OBJEXT@"

# Passed in by configure
CFLAGS="@CFLAGS@"
CPPFLAGS="@CPPFLAGS@"
LDFLAGS="@LDFLAGS@"

# Set in Makefile.am
AM_CFLAGS=""
AM_CPPFLAGS=""
AM_LDFLAGS="-no-undefined -export-dynamic -module"

# Helper programs
LIBTOOL="${bindir}/lux-libtool"
INSTALL="@INSTALL@"

# Automake conditions
@USING_HDF5_TRUE@with_hdf5=yes
@USING_MPI_TRUE@with_mpi=yes
@USING_OPENCL_TRUE@with_opencl=yes
@USING_OPENMP_TRUE@with_openmp=yes
@USING_PTHREAD_TRUE@with_pthread=yes

# Features
PTHREAD_CC="@PTHREAD_CC@"
PTHREAD_LIBS="@PTHREAD_LIBS@"
PTHREAD_CFLAGS="@PTHREAD_CFLAGS@"
#PTHREAD_CPPFLAGS="@PTHREAD_CPPFLAGS@"
#PTHREAD_LDFLAGS="@PTHREAD_LDFLAGS@"

#OPENMP_CC="@OPENMP_CC@"
#OPENMP_LIBS="@OPENMP_LIBS@"
OPENMP_CFLAGS="@OPENMP_CFLAGS@"
#OPENMP_CPPFLAGS="@OPENMP_CPPFLAGS@"
#OPENMP_LDFLAGS="@OPENMP_LDFLAGS@"

#OPENCL_CC="@OPENCL_CC@"
OPENCL_LIBS="@OPENCL_LIBS@"
#OPENCL_CFLAGS="@OPENCL_CFLAGS@"
OPENCL_CPPFLAGS="@OPENCL_CPPFLAGS@"
OPENCL_LDFLAGS="@OPENCL_LDFLAGS@"

MPI_CC="@MPI_CC@"
MPI_LIBS="@MPI_LIBS@"
MPI_CFLAGS="@MPI_CFLAGS@"
MPI_CPPFLAGS="@MPI_CPPFLAGS@"
MPI_LDFLAGS="@MPI_LDFLAGS@"

HDF5_CC="@HDF5_CC@"
HDF5_LIBS="@HDF5_LIBS@"
HDF5_CFLAGS="@HDF5_CFLAGS@"
HDF5_CPPFLAGS="@HDF5_CPPFLAGS@"
HDF5_LDFLAGS="@HDF5_LDFLAGS@"

#==============================================================================
# Helper functions
#------------------------------------------------------------------------------
function check {
	wf="with_$1"
	if test x"${!wf}" != x"yes"; then
		echo 'not enabled; QUIT'
		exit 1
	fi
}

function show {
	echo "${1}=\"${!1}\""
}

function feature {
	printf "Enabling lux feature \"$1\"... "
	case "$1" in # TODO: always apply feature in a certain order
	"pthread" | "pt")
		check "pthread"
		CC="${PTHREAD_CC}"
		LIBS="${PTHREAD_LIBS} ${LIBS}"
		CFLAGS="${PTHREAD_CFLAGS} ${CFLAGS}"
		#CPPFLAGS="${PTHREAD_CPPFLAGS} ${CPPFLAGS}"
		#LDFLAGS="${PTHREAD_LDFLAGS} ${LDFLAGS}"
		;;
	"openmp" | "omp")
		check "openmp"
		#CC="${OPENMP_CC}"
		#LIBS="${OPENMP_LIBS} ${LIBS}"
		CFLAGS="${OPENMP_CFLAGS} ${CFLAGS}"
		#CPPFLAGS="${OPENMP_CPPFLAGS} ${CPPFLAGS}"
		#LDFLAGS="${OPENMP_LDFLAGS} ${LDFLAGS}"
		;;
	"opencl" | "cl")
		check "opencl"
		#CC="${OPENCL_CC}"
		LIBS="${OPENCL_LIBS} ${LIBS}"
		#CFLAGS="${OPENCL_CFLAGS} ${CFLAGS}"
		CPPFLAGS="${OPENCL_CPPFLAGS} ${CPPFLAGS}"
		LDFLAGS="${OPENCL_LDFLAGS} ${LDFLAGS}"
		;;
	"mpi")
		check "mpi"
		CC="${MPI_CC}"
		LIBS="${MPI_LIBS} ${LIBS}"
		CFLAGS="${MPI_CFLAGS} ${CFLAGS}"
		CPPFLAGS="${MPI_CPPFLAGS} ${CPPFLAGS}"
		LDFLAGS="${MPI_LDFLAGS} ${LDFLAGS}"
		;;
	"hdf5" | "h5")
		check "hdf5"
		CC="${HDF5_CC}"
		LIBS="${HDF5_LIBS} ${LIBS}"
		CFLAGS="${HDF5_CFLAGS} ${CFLAGS}"
		CPPFLAGS="${HDF5_CPPFLAGS} ${CPPFLAGS}"
		LDFLAGS="${HDF5_LDFLAGS} ${LDFLAGS}"
		;;
	*)
		check "$1"
		;;
	esac
	echo 'DONE'
}

function help {
	cat <<EOF
usage: ${0} SRC1.c SRC2.c ... [-f FEATURE] [-o OUTPUT/MOD.la] [-i INSTALL/DIR/]

Build and stage/install a lux module with lux's settings.  FEATURE may be
"pthread" (or "pt"), "openmp" (or "omp"), "opencl" (or "cl'), "mpi", or
"hdf5" (or "h5").

Lux settings from `configure` include:

  $(show prefix)
  $(show exec_prefix)
  $(show bindir)
  $(show includedir)
  $(show libdir)

  $(show OBJEXT)

  $(show CC)
  $(show LIBS)
  $(show CFLAGS)
  $(show CPPFLAGS)
  $(show LDFLAGS)

  $(show AM_CFLAGS)
  $(show AM_CPPFLAGS)
  $(show AM_LDFLAGS)
EOF
	exit 0
}

#==============================================================================
# Main script
#------------------------------------------------------------------------------
# Set default installation directory
dir="$PWD"

# Separate the argument list "$@" into input array "$ina", output
# module "$mod", and installation directory "$dir"
kind=src
while test "$#" -gt 0; do
	a="$1"
	shift
	case "$a" in
		"-f" | "--feature")	kind=feature;;
		"-h" | "--help")	kind=src; help;;
		"-o")	kind=src; mod="$1";      shift;;
		"-i")	kind=src; dir="$1";      shift;;
		"+i")	kind=src; dir="$dir/$1"; shift;;
		*)	test "$kind" == "src" && ina+=("$a") || feature "$a";;
	esac
done

# Place all "*.c" files to "$src"; abort if any file does not exist or
# has unknown extension
for i in "${ina[@]}"; do
	if test -f "$i"; then
		case "$i" in
			*.c)	src+=("$i");;
			*.h)	echo "\"$i\" is a header file; SKIP";;
			*)	echo "Invalid input file \"$i\"; ABORT"
				exit 1
				;;
		esac
	else
		case "$i" in
			-I*)	cpp+=("$i");;
			-[Ll]*)	ld+=("$i");;
			*)	echo "Input flag \"$i\"; ABORT"
				exit 1
				;;
		esac
	fi
done

# Obtain a sorted list of unique input file(s); exit if no input file
if test ${#src[@]} -eq 0; then
	cat <<EOF
No input source file is specified; run \`${0} --help\` for help; EXIT
EOF
	exit 0
else
	src=($(ls "${src[@]}" | sort | uniq))
fi

# Use default output module name if "$mod" is not specified
if test "x$mod" == "x"; then
	mod="mod.la"
	echo "No output module is specified; use default \"$mod\""
fi

# Use absolute path
if test "x${dir::1}" != "x/"; then
	dir="$PWD/$dir"
	echo "Directory is not absolute path, prepend current directory"
fi

# Define module name by removing the ".la" extension; abort if module
# name is invalid
case "$mod" in
	*.la)	;;
	*)	echo "Invalid output module \"$mod\"; ABORT"
		exit 1
		;;
esac

# Finally done parsing arguments; print a summary
printf "Input source files: "
for i in "${!src[@]}"; do
	if test $i -lt $(expr "${#src[@]}" - 1); then
		printf "\"${src[$i]}\", "
	else
		echo   "\"${src[$i]}\""
	fi
done
echo "Inline CPP flags: \"${cpp[@]}\""
echo "Inline LD  flags: \"${ld[@]}\""
echo "Output module name: \"$mod\""
echo "Install directory:  \"$dir\""

#------------------------------------------------------------------------------
# Module specific part of the toolchain
mod_CPPFLAGS="-DLUX_MOD_NAME=$(basename ${mod%.la})"
mod_LIBADD="${libdir}/libux.la"

#------------------------------------------------------------------------------
# Compile the source file(s) to object(s)
for s in "${src[@]}"; do
	o="${s%c}lo"
	echo "Compile source file \"$s\" to object file \"$o\""
	${LIBTOOL} --tag=CC --mode=compile ${CC} -c \
		${AM_CFLAGS}   ${CFLAGS}            \
		${AM_CPPFLAGS} ${CPPFLAGS}          \
		${DEFS} ${DEFAULT_INCLUDES}         \
		${mod_CPPFLAGS} ${cpp[@]}           \
		"$s" -o "$o"
	status=$?
	if test $status -ne 0; then
		echo "FAILED COMPILING \"$s\" TO \"$o\"; ABORT"
		exit $status
	fi
	obj+=("$o")
done

#------------------------------------------------------------------------------
# Link object(s) to the output module
printf "Link object file "
for i in "${!obj[@]}"; do
	if test $i -lt $(expr "${#obj}" - 1); then
		printf "\"${obj[$i]}\", "
	else
		printf "\"${obj[$i]}\""
	fi
done
echo "to output module \"$mod\""

${LIBTOOL} --tag=CC --mode=link ${CCLD} \
	${AM_CFLAGS}  ${CFLAGS}         \
	${AM_LDFLAGS} ${LDFLAGS}        \
	${LIBS} ${DEFAULT_RPATH}        \
	${mod_LIBADD} ${ld[@]}          \
	"${obj[@]}" -o "$mod"
status=$?
if test $status -ne 0; then
	echo "FAILED LINKING OBJECT FILE(S) TO \"$mod\"; ABORT"
	exit $status
fi

#------------------------------------------------------------------------------
# Stage/install output module to target directory
echo "Install \"$mod\" to \"$dir\""
mkdir -p "$dir/$(dirname $mod)"
${LIBTOOL} --mode=install ${INSTALL} "$mod" "$dir/$(dirname $mod)"
