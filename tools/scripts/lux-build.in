#!/usr/bin/env bash
#
# Copyright (C) 2009,2011 Chi-kwan Chan
# Copyright (C) 2009 Harvard-Smithsonian Center for Astrophysics
# Copyright (C) 2011 Nordic Institute for Theoretical Physics
#
# This file is part of lux.
#
# lux is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# lux is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License
# along with lux.  If not, see <http://www.gnu.org/licenses/>.

function help {
	cat <<EOF
usage: ${0} INPUT1.c INPUT2.c ... [-o OUTPUT/MOD.la] [-i INSTALL/DIR/]

Build and stage/install a lux module with lux's settings:

  prefix="@prefix@"
  exec_prefix="@exec_prefix@"
  bindir="@bindir@"
  includedir="@includedir@"
  libdir="@libdir@"

  CC="@CC@"
  LIBS="@LIBS@"
  OBJEXT="@OBJEXT@"

  CPPFLAGS="@CPPFLAGS@"
  CFLAGS="@CFLAGS@"
  LDFLAGS="@LDFLAGS@"

  AM_CPPFLAGS=""
  AM_CFLAGS=""
  AM_LDFLAGS="-no-undefined -export-dynamic -module"
EOF
	exit 0
}

#==============================================================================
# Set default installation directory
dir="$PWD"

# Separate the argument list "$@" into input array "$ina", output
# module "$mod", and installation directory "$dir"
while test "$#" -gt 0; do
	a="$1"
	shift
	case "$a" in
		"-h" | "--help")	help;;
		"-o")	mod="$1";      shift;;
		"-i")	dir="$1";      shift;;
		"+i")	dir="$dir/$1"; shift;;
		*)	ina+=("$a");;
	esac
done

# Place all "*.c" files to "$src"; abort if any file does not exist or
# has unknown extension
for i in "${ina[@]}"; do
	if test -f "$i"; then
		case "$i" in
			*.c)	src+=("$i");;
			*.h)	echo "\"$i\" is a header file; SKIP";;
			*)	echo "Invalid input file \"$i\"; ABORT"
				exit 1
				;;
		esac
	else
		case "$i" in
			-I*)	cpp+=("$i");;
			-[Ll]*)	ld+=("$i");;
			*)	echo "Input flag \"$i\"; ABORT"
				exit 1
				;;
		esac
	fi
done

# Obtain a sorted list of unique input file(s); exit if no input file
if test ${#src} -eq 0; then
	cat <<EOF
No input source file is specified; run \`${0} --help\` for help; EXIT
EOF
	exit 0
else
	src=($(ls "${src[@]}" | sort | uniq))
fi

# Use default output module name if "$mod" is not specified
if test "x$mod" == "x"; then
	mod="mod.la"
	echo "No output module is specified; use default \"$mod\""
fi

# Use absolute path
if test "x${dir::1}" != "x/"; then
	dir="$PWD/$dir"
	echo "Directory is not absolute path, prepend current directory"
fi

# Define module name by removing the ".la" extension; abort if module
# name is invalid
case "$mod" in
	*.la)	;;
	*)	echo "Invalid output module \"$mod\"; ABORT"
		exit 1
		;;
esac

# Finally done parsing arguments; print a summary
printf "Input source files: "
for i in "${!src[@]}"; do
	if test $i -lt $(expr "${#src[@]}" - 1); then
		printf "\"${src[$i]}\", "
	else
		echo   "\"${src[$i]}\""
	fi
done
echo "Inline CPP flags: \"${cpp[@]}\""
echo "Inline LD  flags: \"${ld[@]}\""
echo "Output module name: \"$mod\""
echo "Install directory:  \"$dir\""

#==============================================================================
# Installation paths
prefix="@prefix@"
exec_prefix="@exec_prefix@"
bindir="@bindir@"
includedir="@includedir@"
libdir="@libdir@"

# Compiler and standard flags
CC="@CC@"
CCLD="${CC}"
DEFS="-DHAVE_CONFIG_H"
DEFAULT_INCLUDES="-I. -I${includedir}"
LIBS="@LIBS@"
DEFAULT_RPATH="-rpath ${libdir}/lux"
OBJEXT="@OBJEXT@"

# Passed in by configure
CPPFLAGS="@CPPFLAGS@"
CFLAGS="@CFLAGS@"
LDFLAGS="@LDFLAGS@"

# Set in Makefile.am
AM_CPPFLAGS=""
AM_CFLAGS=""
AM_LDFLAGS="-no-undefined -export-dynamic -module"

# Helper programs
LIBTOOL="${bindir}/lux-libtool"
INSTALL="@INSTALL@"

# Module specific part of the toolchain
mod_CPPFLAGS="-DLUX_MOD_NAME=${mod%.la}"
mod_LIBADD="${libdir}/libux.la"

#==============================================================================
# Compile the source file(s) to object(s)
for s in "${src[@]}"; do
	o="${s%c}lo"
	echo "Compile source file \"$s\" to object file \"$o\""
	${LIBTOOL} --tag=CC --mode=compile ${CC} -c \
		${DEFS} ${DEFAULT_INCLUDES}         \
		${AM_CPPFLAGS} ${CPPFLAGS}          \
		${AM_CFLAGS} ${CFLAGS}              \
		${mod_CPPFLAGS} ${cpp[@]}           \
		"$s" -o "$o"
	status=$?
	if test $status -ne 0; then
		echo "FAILED COMPILING \"$s\" TO \"$o\"; ABORT"
		exit $status
	fi
	obj+=("$o")
done

#==============================================================================
# Link object(s) to the output module
printf "Link object file "
for i in "${!obj[@]}"; do
	if test $i -lt $(expr "${#obj}" - 1); then
		printf "\"${obj[$i]}\", "
	else
		printf "\"${obj[$i]}\""
	fi
done
echo "to output module \"$mod\""

${LIBTOOL} --tag=CC --mode=link ${CCLD} \
	${AM_CFLAGS} ${CFLAGS}          \
	${AM_LDFLAGS} ${LDFLAGS}        \
	${LIBS} ${DEFAULT_RPATH}        \
	${mod_LIBADD} ${ld[@]}          \
	"${obj[@]}" -o "$mod"
status=$?
if test $status -ne 0; then
	echo "FAILED LINKING OBJECT FILE(S) TO \"$mod\"; ABORT"
	exit $status
fi

#==============================================================================
# Stage/install output module to target directory
echo "Install \"$mod\" to \"$dir\""
mkdir -p "$dir"
${LIBTOOL} --mode=install ${INSTALL} "$mod" "$dir"
