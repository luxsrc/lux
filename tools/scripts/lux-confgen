#!/bin/sh
#
# Copyright (C) 2011 Chi-kwan Chan
# Copyright (C) 2011 Nordic Institute for Theoretical Physics
#
# This file is part of lux.
#
# lux is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# lux is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License
# along with lux.  If not, see <http://www.gnu.org/licenses/>.

#==============================================================================
# Print usage

if test "$#" -eq 0 || test "x$1" == "x-h"; then
	echo "usage: $0 input.ptab"
	exit 0
fi

#==============================================================================
# Parse input and output file names

inp="${1}"
cfg="${inp%.ptab}"
out="${cfg}.h"

printf "lux-confgen: \"${inp}\" -> \"${out}\"... "

#==============================================================================
# Define a c-struct; allocate, initialize, and configure the struct

cat <<EOF > "${out}"
/* ${out}.  Generated from ${cfg}.ptab by lux-codegen.  */

#include <lux/config.h>
#include <lux/failed.h>
#include <stdlib.h>

struct ${cfg} {
EOF

awk -F '\t' '{
	printf "\t%s\t%s;\t%s\n", $1, $2, $5;
}' "${inp}" >> "${out}"

cat <<EOF >> "${out}"
};

static inline struct ${cfg} *
mk${cfg}(void)
{
	struct ${cfg} *p = (struct ${cfg} *)malloc(sizeof(struct ${cfg}));
	if(p) {
EOF

awk -F '\t' '{
	printf "\t\tp->%s %s;\n", $2, $3;
}' "${inp}" >> "${out}"

cat <<EOF >> "${out}"
	}
	return p;
}

static inline void
rm${cfg}(struct ${cfg} *p)
{
	free(p);
}

static inline int
cf${cfg}(struct ${cfg} *p, const char *arg)
{
	const char *val = NULL;
	char *rem;

	int fsv = failed;
	failed  = 0;

	SWITCH {
EOF

awk -F '\t' '{
	printf "\tCONFIG(%s, \"%s\") %s\n", $2, $2, $4;
}' "${inp}" >> "${out}"

cat <<EOF >> "${out}"
	}

	if(!val || failed)
		return 1;
	else {
		failed = fsv; /* restore previous failure code */
		return 0;
	}
}
EOF

printf "DONE\n"
