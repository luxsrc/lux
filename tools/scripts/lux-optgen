#!/usr/bin/env bash
#
# Copyright (C) 2011 Chi-kwan Chan
# Copyright (C) 2011 Nordic Institute for Theoretical Physics
#
# This file is part of lux.
#
# lux is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# lux is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License
# along with lux.  If not, see <http://www.gnu.org/licenses/>.

#==============================================================================
# Print usage

if test "$#" -eq 0 || test "x$1" == "x-h"; then
	echo "usage: $0 input.opts"
	exit 0
fi

#==============================================================================
# Parse input and output file names

in="${1}"
opts="${in%.opts}"
out="${opts}.h"

printf "lux-confgen: \"${in}\" -> \"${out}\"... "

#==============================================================================
# Define a c-struct; allocate, initialize, and configure the struct

cat <<EOF > "${out}"
/* ${out}.  Generated from ${opts}.opts by lux-optgen.  */

#include <lux/failed.h>
#include <lux/match.h>
#include <lux/switch.h>
#include <stdlib.h>

#define CONFIG(v, s) CASE((val = match(s, arg))) p->v

struct ${opts} {
EOF

awk -F '\t' '!/^($|[:space:]*#)/{
	split($2, a, ":");
	printf "\t%s\t%s;\t%s\n", $1, a[1], $5;
}' "${in}" >> "${out}"

cat <<EOF >> "${out}"
};

static inline void
${opts}_init(struct ${opts} *p)
{
EOF

awk -F '\t' '!/^($|[:space:]*#)/{
	split($2, a, ":");
	printf "\tp->%s %s;\n", a[1], $3;
}' "${in}" >> "${out}"

cat <<EOF >> "${out}"
}

static inline int
${opts}_config(struct ${opts} *p, const char *arg)
{
	const char *val = NULL;
	char *rem;

	int fsv = failed;
	failed  = 0;

	SWITCH {
EOF

awk -F '\t' '!/^($|[:space:]*#)/{
	split($2, a, ":");
	printf "\tCONFIG(%s, \"%s\") %s\n", a[1], $2, $4;
}' "${in}" >> "${out}"

cat <<EOF >> "${out}"
	}

	if(!val || failed)
		return 1;
	else {
		failed = fsv; /* restore previous failure code */
		return 0;
	}
}

static inline struct ${opts} *
mk${opts}(void)
{
	struct ${opts} *p = malloc(sizeof(struct ${opts}));
	${opts}_init(p);
	return p;
}

static inline void
rm${opts}(struct ${opts} *p)
{
	free(p);
}
EOF

printf "DONE\n"
