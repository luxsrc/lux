#!/bin/sh

# Seperate the argument list "$@" into input array "$ina" and output "$out"
while test "$#" -gt 0; do
	a="$1"
	shift
	if test "x$a" != "x-o"; then
		ina+=("$a")
	elif test "$#" -gt 0; then
		out="$1"
		shift
	fi
done

# Place all "*.c" files to "$src"; abort if any file does not exist or
# has unknown extension
for i in "${ina[@]}"; do
	if test -f "$i"; then
		case "$i" in
			*.c)	src+=("$i");;
			*.h)	echo "\"$i\" is a header file; SKIP";;
			*)	echo "Invalid input module \"$i\"; ABORT"
				exit 1
				;;
		esac
	else
		echo "Input file \"$i\" not found; ABORT"
		exit 1
	fi
done

# Obtain a sorted list of unique input file(s); exit if no input file
if test ${#src} -eq 0; then
	echo "No input source file is specified; EXIT"
	exit 0
else
	src=($(ls "${src[@]}" | sort | uniq))
fi

# Use default output name if "$out" is specified
if test "x$out" == "x"; then
	out="mod.la"
	echo "No output module is specified; use default \"$out\""
fi

# Split path into "$dir" and "$out"
case "$out" in
	*/*)	dir=$(dirname  "$out")
		out=$(basename "$out")
		;;
	*)	dir="sim"
		;;
esac

# Define module name by removing the ".la" extension; abort if module
# name is invalid
case "$out" in
	*.la)	;;
	*)	echo "Invalid output module \"$out\"; ABORT"
		exit 1
		;;
esac

# Finally done parsing arguments; print a summary
printf "Input source files: "
for i in "${!src[@]}"; do
	if test $i -lt $(expr "${#src}" - 1); then
		printf "\"${src[$i]}\", "
	else
		echo   "\"${src[$i]}\""
	fi
done
echo "Output module name: \"${out}\""

# Installation paths
prefix="@prefix@"
exec_prefix="@exec_prefix@"
bindir="@bindir@"
includedir="@includedir@"
libdir="@libdir@"

# Compiler and standard flags
CC="@CC@"
CCLD="${CC}"
DEFS="-DHAVE_CONFIG_H"
DEFAULT_INCLUDES="-I. -I${includedir}"
LIBS="@LIBS@"
DEFAULT_RPATH="-rpath ${libdir}/lux"
OBJEXT="@OBJEXT@"

# Passed in by configure
CPPFLAGS="@CPPFLAGS@"
CFLAGS="@CFLAGS@"
LDFLAGS="@LDFLAGS@"

# Set in Makefile.am
AM_CPPFLAGS=""
AM_CFLAGS=""
AM_LDFLAGS="-no-undefined -export-dynamic -module"

# Helper programs
LIBTOOL="${bindir}/lux-libtool"
INSTALL="@INSTALL@"

# Module specific part of the toolchain
mod_CPPFLAGS="-DLUX_MOD_NAME=${out%.la}"
mod_LIBADD="${libdir}/libux.la"

# Clean up---we do not track timestamp of the dependencies so there is
# no reason to keep the intermediate files
function cleanup {
	echo "Cleaning up intermediate files"
	rm -rf .libs _libs
	rm -f "$out"
	rm -f *.$OBJEXT
	rm -f *.lo
}
trap cleanup EXIT

# Compile the source file(s) to object(s)
for s in "${src[@]}"; do
	o="${s%c}lo"
	echo "Compile source file \"$s\" to object file \"$o\""
	${LIBTOOL} --tag=CC --mode=compile ${CC} -c \
		${DEFS} ${DEFAULT_INCLUDES}         \
		${AM_CPPFLAGS} ${CPPFLAGS}          \
		${AM_CFLAGS} ${CFLAGS}              \
		"$s" ${mod_CPPFLAGS} -o "$o"
	status=$?
	if test $status -ne 0; then
		echo "FAILED COMPILING \"$s\" TO \"$o\"; ABORT"
		exit $status
	fi
	obj+=("$o")
done

# Link object(s) to the output module
printf "Link object ffile "
for i in "${!obj[@]}"; do
	if test $i -lt $(expr "${#obj}" - 1); then
		printf "\"${obj[$i]}\", "
	else
		printf "\"${obj[$i]}\""
	fi
done
echo "to output module \"$out\""

${LIBTOOL} --tag=CC --mode=link ${CCLD} \
	${AM_CFLAGS} ${CFLAGS}          \
	${AM_LDFLAGS} ${LDFLAGS}        \
	${LIBS} ${DEFAULT_RPATH}        \
	"${obj[@]}" ${mod_LIBADD} -o "$out"
status=$?
if test $status -ne 0; then
	echo "FAILED LINKING OBJECT FILE(S) TO \"$out\"; ABORT"
	exit $status
fi

# Install output module to "$dir"
echo "Install \"$out\" to \"$dir\""
mkdir -p "$PWD/$dir"
${LIBTOOL} --mode=install ${INSTALL} "$out" "$PWD/$dir"
